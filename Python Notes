######### 16-05-2025

# It was initially designed by Guido van Rossum in 1991 and developed by Python Software Foundation.

######### 17-05-2025

# It is written in the C programming language.

######### 18-05-2025

# The name was inspired by the British comedy group Monty Python.

######### 19-05-2025

# This is a comment. It will not be executed.

######### 20-05-2025

# It runs commands line by line. Each line contains a single instruction.

######### 21-05-2025

# The print() function is used to display text or values on the screen.
print("Hello, World!")
print(123)

######### 22-05-2025

# A string is text in Python. It must be inside quotes: "hello" or 'hello'.

-------------------------------------------------------

######### 23-05-2025

# The type() function returns the data type (class) of the given value.
print(type("cenk"))      # <class 'str'>
print(type(42))          # <class 'int'>

# An int (integer) represents whole numbers (positive, negative, or zero) in Python.

######### 24-05-2025

# A float represents decimal (floating point) numbers in Python.
boy = 1.75
print(type(boy))  # <class 'float'>

# A bool represents logical values: True or False. (Boolean data type)
hava_gunesli = True # Capital Letter
sigara_icti_mi = False # Capital Letter
print(type(hava_gunesli))   # <class 'bool'>

######### 25-05-2025

# A list is an ordered collection of items. Lists are mutable (you can change their content after creation).
my_list = [1, 2, 3]
my_list[0] = 10
print(my_list)  # Output: [10, 2, 3]

# A tuple is an ordered collection of items like a list, but it is immutable (you cannot change its content).
my_tuple = (1, 2, 3)
print(my_tuple[1])  # Output: 2

######### 26-05-2025

# len () fuction returns the number of items in a sequence or collection. It works with: strings, lists, tuples, dictionaries, etc.
len("Cenk")             # 4
len([1, 2, 3])          # 3
len((True, False))      # 2
len({"a": 1, "b": 2})   # 2

# dict - A dictionary stores key-value pairs. Keys must be unique. Values can be any type.
person = {
    "name": "Cenk",
    "age": 33,
    "city": "Ankara"
}
print(person["name"])      # Output: Cenk
person.keys()      # All the keys
person.values()    # All the values
person.items()     # All the keys and values

######### 27-05-2025

# A variable is used to store data. Python doesn’t require you to declare the type.
name = "Cenk" stores a string.

# input("message") displays a prompt and waits for user input. The result is always a string. Use int(), float() etc. to convert if needed.
name = input("What's your name? ")
print("Hey", name)

######### 28-05-2025

# int() function converts a value to an integer type (whole number).
num = int("42")    # string → int
print(num + 1)     # Output: 43

# str() function converts a value to a string type.
age = 33
message = "Age: " + str(age)
print(message)     # Output: Age: 33

######### 29-05-2025

# Converting input to integer using int()
# Ask for two numbers from the user and add them
num1 = int(input("Enter the first number: "))
num2 = int(input("Enter the second number: "))
total = num1 + num2
print("The total is:", total)
# input() always returns a string, even if the user types a number.
# You must convert it using int() or float() before doing math operations.

# if statement – basic conditional logic
# Ask the user's age and respond based on the input
age = int(input("Enter your age: "))
if age >= 18:
    print("You are an adult!")
else:
    print("You are not an adult.")
if is used to check a condition.
If the condition is True, the block under if runs.
If the condition is False, the else block runs.

######### 30-05-2025

# None ~ Represents the absence of a value. The data type is NoneType.
x = None
print(x)            # Output: None
print(type(x))      # <class 'NoneType'>

# type casting ~ The process of converting one data type into another (e.g. string to int).
int("123")      # string → int
float("3.14")   # string → float
str(42)         # int → string
bool(0)         # 0 → False, others → True

######### 31-05-2025

# The bool() function converts a value to a boolean (True or False).
# Common rules: 0, 0.0, "", [], (), {}, None → False. Everything else → True.
print(bool(0))        # Output: False
print(bool("Hi"))     # Output: True
print(bool([]))       # Output: False
print(bool([1, 2]))   # Output: True

# The pass statement is a placeholder that does nothing.
# It's useful when a statement is syntactically required but no action is needed yet.
if True:
    pass  # Do nothing for now
else:
    print("This won't run")

######### 01-06-2025

PRACTICE DAY!

######### 02-06-2025

OFF DAY!

######### 03-06-2025

# elif keyword – Multiple Conditions

age = int(input("Enter your age: "))

if age < 13:
    print("Child")
elif age < 20:
    print("Teenager")
else:
    print("Adult")

# elif stands for "else if". It lets you check multiple conditions in sequence.

in operator – Membership Test

fruits = ["apple", "banana", "cherry"]

if "banana" in fruits:
    print("Yes, banana is in the list!")

# in checks if a value exists inside a list, string, or other iterable.

######### 04-06-2025

 + (Addition Operator)
Used to add two numbers or concatenate strings.

# Numbers
a = 5 + 3      # 8

# Strings
greeting = "Hello, " + "Cenk!"  # "Hello, Cenk!"

 - (Subtraction Operator)
Used to subtract one number from another.

x = 10 - 4     # 6
Note: These operators work only on compatible types (e.g., you can't subtract strings).








